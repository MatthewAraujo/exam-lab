[
  {
    "question": "You are given a project with a single Virtual Private Cloud (VPC) and a single subnetwork in the us-central1 region. There is a Compute Engine instance hosting an application in this subnetwork. You need to deploy a new instance in the same project in the europe-west1 region. This new instance needs access to the application. You want to follow Google-recommended practices. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "1. Create a subnetwork in the same VPC, in europe-west1. 2. Create the new instance in the new subnetwork and use the first instance's private address as the endpoint.",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "1. Create a VPC and a subnetwork in europe-west1. 2. Expose the application with an internal load balancer. 3. Create the new instance in the new subnetwork and use the load balancer's address as the endpoint.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "1. Create a subnetwork in the same VPC, in europe-west1. 2. Use Cloud VPN to connect the two subnetworks. 3. Create the new instance in the new subnetwork and use the first instance's private address as the endpoint.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "1. Create a VPC and a subnetwork in europe-west1. 2. Peer the 2 VPCs. 3. Create the new instance in the new subnetwork and use the first instance's private address as the endpoint.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your projects incurred more costs than you expected last month. Your research reveals that a development GKE container emitted a huge number of logs, which resulted in higher costs. You want to disable the logs quickly using the minimum number of steps. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "1. Go to the Logs ingestion window in Stackdriver Logging, and disable the log source for the GKE container resource.",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "1. Go to the Logs ingestion window in Stackdriver Logging, and disable the log source for the GKE Cluster Operations resource.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "1. Go to the GKE console, and delete existing clusters. 2. Recreate a new cluster. 3. Clear the option to enable legacy Stackdriver Logging.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "1. Go to the GKE console, and delete existing clusters. 2. Recreate a new cluster. 3. Clear the option to enable legacy Stackdriver Monitoring.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You have a website hosted on App Engine standard environment. You want 1% of your users to see a new test version of the website. You want to minimize complexity. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Deploy the new version in the same application and use the --migrate option.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Deploy the new version in the same application and use the --splits option to give a weight of 99 to the current version and a weight of 1 to the new version.",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Create a new App Engine application in the same project. Deploy the new version in that application. Use the App Engine library to proxy 1% of the requests to the new version.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Create a new App Engine application in the same project. Deploy the new version in that application. Configure your network load balancer to send 1% of the traffic to that new application.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You have a web application deployed as a managed instance group. You have a new version of the application to gradually deploy. Your web application is currently receiving live web traffic. You want to ensure that the available capacity does not decrease during the deployment. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Perform a rolling-action start-update with maxSurge set to 0 and maxUnavailable set to 1.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Perform a rolling-action start-update with maxSurge set to 1 and maxUnavailable set to 0.",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Create a new managed instance group with an updated instance template. Add the group to the backend service for the load balancer. When all instances in the new managed instance group are healthy, delete the old managed instance group.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Create a new instance template with the new application version. Update the existing managed instance group with the new instance template. Delete the instances in the managed instance group to allow the managed instance group to recreate the instance using the new instance template.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You are building an application that stores relational data from users. Users across the globe will use this application. Your CTO is concerned about the scaling requirements because the size of the user base is unknown. You need to implement a database solution that can scale with your user growth with minimum configuration changes. Which storage solution should you use?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Cloud SQL",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Cloud Spanner",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Cloud Firestore",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Cloud Datastore",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You are the organization and billing administrator for your company. The engineering team has the Project Creator role on the organization. You do not want the engineering team to be able to link projects to the billing account. Only the finance team should be able to link a project to a billing account, but they should not be able to make any other changes to projects. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Assign the finance team only the Billing Account User role on the billing account.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Assign the engineering team only the Billing Account User role on the billing account.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Assign the finance team the Billing Account User role on the billing account and the Project Billing Manager role on the organization.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Assign the engineering team the Billing Account User role on the billing account and the Project Billing Manager role on the organization.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You have an application running in Google Kubernetes Engine (GKE) with cluster autoscaling enabled. The application exposes a TCP endpoint. There are several replicas of this application. You have a Compute Engine instance in the same region, but in another Virtual Private Cloud (VPC), called gce-network, that has no overlapping IP ranges with the first VPC. This instance needs to connect to the application on GKE. You want to minimize effort. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "1. In GKE, create a Service of type LoadBalancer that uses the application's Pods as backend. 2. Set the service's externalTrafficPolicy to Cluster. 3. Configure the Compute Engine instance to use the address of the load balancer that has been created.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "1. In GKE, create a Service of type NodePort that uses the application's Pods as backend. 2. Create a Compute Engine instance called proxy with 2 network interfaces, one in each VPC. 3. Use iptables on this instance to forward traffic from gce-network to the GKE nodes. 4. Configure the Compute Engine instance to use the address of proxy in gce-network as endpoint.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "1. In GKE, create a Service of type LoadBalancer that uses the application's Pods as backend. 2. Add an annotation to this service: cloud.google.com/load-balancer-type: Internal 3. Peer the two VPCs together. 4. Configure the Compute Engine instance to use the address of the load balancer that has been created.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "1. In GKE, create a Service of type LoadBalancer that uses the application's Pods as backend. 2. Add a Cloud Armor Security Policy to the load balancer that whitelists the internal IPs of the MIG's instances. 3. Configure the Compute Engine instance to use the address of the load balancer that has been created.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your organization is a financial company that needs to store audit log files for 3 years. Your organization has hundreds of Google Cloud projects. You need to implement a cost-effective approach for log file retention. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Create an export to the sink that saves logs from Cloud Audit to BigQuery.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Create an export to the sink that saves logs from Cloud Audit to a Coldline Storage bucket.",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Write a custom script that uses logging API to copy the logs from Stackdriver logs to BigQuery.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Export these logs to Cloud Pub/Sub and write a Cloud Dataflow pipeline to store logs to Cloud SQL.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You want to run a single caching HTTP reverse proxy on GCP for a latency-sensitive website. This specific reverse proxy consumes almost no CPU. You want to have a 30-GB in-memory cache, and need an additional 2 GB of memory for the rest of the processes. You want to minimize cost. How should you run this reverse proxy?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Create a Cloud Memorystore for Redis instance with 32-GB capacity.",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "Run it on Compute Engine, and choose a custom instance type with 6 vCPUs and 32 GB of memory.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Package it in a container image, and run it on Kubernetes Engine, using n1-standard-32 instances as nodes.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Run it on Compute Engine, choose the instance type n1-standard-1, and add an SSD persistent disk of 32 GB.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You are hosting an application on bare-metal servers in your own data center. The application needs access to Cloud Storage. However, security policies prevent the servers hosting the application from having public IP addresses or access to the internet. You want to follow Google-recommended practices to provide the application with access to Cloud Storage. What should you do?",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "1. Use nslookup to get the IP address for storage.googleapis.com. 2. Negotiate with the security team to be able to give a public IP address to the servers. 3. Only allow egress traffic from those servers to the IP addresses for storage.googleapis.com.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "1. Using Cloud VPN, create a VPN tunnel to a Virtual Private Cloud (VPC) in Google Cloud. 2. In this VPC, create a Compute Engine instance and install the Squid proxy server on this instance. 3. Configure your servers to use that instance as a proxy to access Cloud Storage.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "1. Use Migrate for Compute Engine (formerly known as Velostrata) to migrate those servers to Compute Engine. 2. Create an internal load balancer (ILB) that uses storage.googleapis.com as backend. 3. Configure your new instances to use this ILB as proxy.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "1. Using Cloud VPN or Interconnect, create a tunnel to a VPC in Google Cloud. 2. Use Cloud Router to create a custom route advertisement for 199.36.153.4/30. Announce that network to your on-premises network through the VPN tunnel. 3. In your on-premises network, configure your DNS server to resolve *.googleapis.com as a CNAME to restricted.googleapis.com.",
        "correct": true,
        "why": ""
      }
    }
  }
]