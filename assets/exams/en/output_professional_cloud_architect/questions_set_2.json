[
  {
    "question": "Your company has successfully migrated to the cloud and wants to analyze their data stream to optimize operations. They do not have any existing code for this analysis, so they are exploring all their options. These options include a mix of batch and stream processing, as they are running some hourly jobs and live- processing some data as it comes in. Which technology should they use for this?",
    "alternatives": {
      "A": {
        "answer": "Google Cloud Dataproc",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Google Cloud Dataflow",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Google Container Engine with Bigtable",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Google Compute Engine with Google BigQuery",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your customer is receiving reports that their recently updated Google App Engine application is taking approximately 30 seconds to load for some of their users.This behavior was not reported before the update. What strategy should you take?",
    "alternatives": {
      "A": {
        "answer": "Work with your ISP to diagnose the problem",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Open a support ticket to ask for network capture and flow data to diagnose the problem, then roll back your application",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Roll back to an earlier known good release initially, then use Stackdriver Trace and Logging to diagnose the problem in a development/test/staging environment",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Roll back to an earlier known good release, then push the release again at a quieter period to investigate. Then use Stackdriver Trace and Logging to diagnose the problem",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "A production database virtual machine on Google Compute Engine has an ext4-formatted persistent disk for data files. The database is about to run out of storage space. How can you remediate the problem with the least amount of downtime?",
    "alternatives": {
      "A": {
        "answer": "In the Cloud Platform Console, increase the size of the persistent disk and use the resize2fs command in Linux.",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "Shut down the virtual machine, use the Cloud Platform Console to increase the persistent disk size, then restart the virtual machine",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "In the Cloud Platform Console, increase the size of the persistent disk and verify the new space is ready to use with the fdisk command in Linux",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "In the Cloud Platform Console, create a new persistent disk attached to the virtual machine, format and mount it, and configure the database service to move the files to the new disk",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your application needs to process credit card transactions. You want the smallest scope of Payment Card Industry (PCI) compliance without compromising the ability to analyze transactional data and trends relating to which payment methods are used. How should you design your architecture?",
    "alternatives": {
      "A": {
        "answer": "Create a tokenizer service and store only tokenized data",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "Create separate projects that only process credit card data",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Create separate subnetworks and isolate the components that process credit card data",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Streamline the audit discovery phase by labeling all of the virtual machines (VMs) that process PCI data",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You have been asked to select the storage system for the click-data of your company's large portfolio of websites. This data is streamed in from a custom website analytics package at a typical rate of 6,000 clicks per minute. With bursts of up to 8,500 clicks per second. It must have been stored for future analysis by your data science and user experience teams. Which storage infrastructure should you choose?",
    "alternatives": {
      "A": {
        "answer": "Google Cloud SQL",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Google Cloud Bigtable",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Google Cloud Storage",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Google Cloud Datastore",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You are creating a solution to remove backup files older than 90 days from your backup Cloud Storage bucket. You want to optimize ongoing Cloud Storage spend. What should you do?",
    "alternatives": {
      "A": {
        "answer": "Write a lifecycle management rule in XML and push it to the bucket with gsutil",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Write a lifecycle management rule in JSON and push it to the bucket with gsutil",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Schedule a cron script using gsutil ls \"lr gs://backups/** to find and remove items older than 90 days",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Schedule a cron script using gsutil ls \"l gs://backups/** to find and remove items older than 90 days and schedule it with cron",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company is forecasting a sharp increase in the number and size of Apache Spark and Hadoop jobs being run on your local datacenter. You want to utilize the cloud to help you scale this upcoming demand with the least amount of operations work and code change. Which product should you use?",
    "alternatives": {
      "A": {
        "answer": "Google Cloud Dataflow",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Google Cloud Dataproc",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Google Compute Engine",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Google Kubernetes Engine",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "The database administration team has asked you to help them improve the performance of their new database server running on Google Compute Engine. The database is for importing and normalizing their performance statistics and is built with MySQL running on Debian Linux. They have an n1-standard-8 virtual machine with 80 GB of SSD persistent disk. What should they change to get better performance from this system?",
    "alternatives": {
      "A": {
        "answer": "Increase the virtual machine's memory to 64 GB",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Create a new virtual machine running PostgreSQL",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Dynamically resize the SSD persistent disk to 500 GB",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Migrate their performance metrics warehouse to BigQuery",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You want to optimize the performance of an accurate, real-time, weather-charting application. The data comes from 50,000 sensors sending 10 readings a second, in the format of a timestamp and sensor reading.Where should you store the data?",
    "alternatives": {
      "A": {
        "answer": "Google BigQuery",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Google Cloud SQL",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Google Cloud Bigtable",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Google Cloud Storage",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company's user-feedback portal comprises a standard LAMP stack replicated across two zones. It is deployed in the us-central1 region and uses autoscaled managed instance groups on all layers, except the database. Currently, only a small group of select customers have access to the portal. The portal meets a99,99% availability SLA under these conditions. However next quarter, your company will be making the portal available to all users, including unauthenticated users. You need to develop a resiliency testing strategy to ensure the system maintains the SLA once they introduce additional user load. What should you do?",
    "alternatives": {
      "A": {
        "answer": "Capture existing users input, and replay captured user load until autoscale is triggered on all layers. At the same time, terminate all resources in one of the zones",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Create synthetic random user input, replay synthetic load until autoscale logic is triggered on at least one layer, and introduce chaos to the system by terminating random resources on both zones",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Expose the new system to a larger group of users, and increase group size each day until autoscale logic is triggered on all layers. At the same time, terminate random resources on both zones",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Capture existing users input, and replay captured user load until resource utilization crosses 80%. Also, derive estimated number of users based on existing user's usage of the app, and deploy enough resources to handle 200% of expected load",
        "correct": false,
        "why": ""
      }
    }
  }
]