[
  {
    "question": "You are implementing the infrastructure for a web service on Google Cloud. The web service needs to receive and store the data from 500,000 requests per second. The data will be queried later in real time, based on exact matches of a known set of attributes. There will be periods where the web service will not receive any requests. The business wants to keep costs low. Which web service platform and database should you use for the application?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Cloud Run and BigQuery",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Cloud Run and Cloud Bigtable",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "A Compute Engine autoscaling managed instance group and BigQuery",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "A Compute Engine autoscaling managed instance group and Cloud Bigtable",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You are developing an application using different microservices that should remain internal to the cluster. You want to be able to configure each microservice with a specific number of replicas. You also want to be able to address a specific microservice from any other microservice in a uniform way, regardless of the number of replicas the microservice scales to. You need to implement this solution on Google Kubernetes Engine. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Deploy each microservice as a Deployment. Expose the Deployment in the cluster using a Service, and use the Service DNS name to address it from other microservices within the cluster.",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "Deploy each microservice as a Deployment. Expose the Deployment in the cluster using an Ingress, and use the Ingress IP address to address the Deployment from other microservices within the cluster.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Deploy each microservice as a Pod. Expose the Pod in the cluster using a Service, and use the Service DNS name to address the microservice from other microservices within the cluster.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Deploy each microservice as a Pod. Expose the Pod in the cluster using an Ingress, and use the Ingress IP address name to address the Pod from other microservices within the cluster.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company has a networking team and a development team. The development team runs applications on Compute Engine instances that contain sensitive data. The development team requires administrative permissions for Compute Engine. Your company requires all network resources to be managed by the networking team. The development team does not want the networking team to have access to the sensitive data on the instances. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "1. Create a project with a standalone VPC and assign the Network Admin role to the networking team. 2. Create a second project with a standalone VPC and assign the Compute Admin role to the development team. 3. Use Cloud VPN to join the two VPCs.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "1. Create a project with a standalone Virtual Private Cloud (VPC), assign the Network Admin role to the networking team, and assign the Compute Admin role to the development team.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "1. Create a project with a Shared VPC and assign the Network Admin role to the networking team. 2. Create a second project without a VPC, configure it as a Shared VPC service project, and assign the Compute Admin role to the development team.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "1. Create a project with a standalone VPC and assign the Network Admin role to the networking team. 2. Create a second project with a standalone VPC and assign the Compute Admin role to the development team. 3. Use VPC Peering to join the two VPCs.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company wants you to build a highly reliable web application with a few public APIs as the backend. You don't expect a lot of user traffic, but traffic could spike occasionally. You want to leverage Cloud Load Balancing, and the solution must be cost-effective for users. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Store static content such as HTML and images in Cloud CDN. Host the APIs on App Engine and store the user data in Cloud SQL.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Store static content such as HTML and images in a Cloud Storage bucket. Host the APIs on a zonal Google Kubernetes Engine cluster with worker nodes in multiple zones, and save the user data in Cloud Spanner.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Store static content such as HTML and images in Cloud CDN. Use Cloud Run to host the APIs and save the user data in Cloud SQL.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Store static content such as HTML and images in a Cloud Storage bucket. Use Cloud Functions to host the APIs and save the user data in Firestore.",
        "correct": true,
        "why": ""
      }
    }
  },
  {
    "question": "Your company sends all Google Cloud logs to Cloud Logging. Your security team wants to monitor the logs. You want to ensure that the security team can react quickly if an anomaly such as an unwanted firewall change or server breach is detected. You want to follow Google-recommended practices. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Schedule a cron job with Cloud Scheduler. The scheduled job queries the logs every minute for the relevant events.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Export logs to BigQuery, and trigger a query in BigQuery to process the log data for the relevant events.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Export logs to a Pub/Sub topic, and trigger Cloud Function with the relevant log events.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Export logs to a Cloud Storage bucket, and trigger Cloud Run with the relevant log events.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You have deployed several instances on Compute Engine. As a security requirement, instances cannot have a public IP address. There is no VPN connection between Google Cloud and your office, and you need to connect via SSH into a specific machine without violating the security requirements. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Configure Cloud NAT on the subnet where the instance is hosted. Create an SSH connection to the Cloud NAT IP address to reach the instance.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Add all instances to an unmanaged instance group. Configure TCP Proxy Load Balancing with the instance group as a backend. Connect to the instance using the TCP Proxy IP.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Configure Identity-Aware Proxy (IAP) for the instance and ensure that you have the role of IAP-secured Tunnel User. Use the gcloud command line tool to ssh into the instance.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Create a bastion host in the network to SSH into the bastion host from your office location. From the bastion host, SSH into the desired instance.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company is using Google Cloud. You have two folders under the Organization: Finance and Shopping. The members of the development team are in aGoogle Group. The development team group has been assigned the Project Owner role on the Organization. You want to prevent the development team from creating resources in projects in the Finance folder. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Assign the development team group the Project Viewer role on the Finance folder, and assign the development team group the Project Owner role on the Shopping folder.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Assign the development team group only the Project Viewer role on the Finance folder.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Assign the development team group the Project Owner role on the Shopping folder, and remove the development team group Project Owner role from the Organization.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Assign the development team group only the Project Owner role on the Shopping folder.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "You are developing your microservices application on Google Kubernetes Engine. During testing, you want to validate the behavior of your application in case a specific microservice should suddenly crash. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Add a taint to one of the nodes of the Kubernetes cluster. For the specific microservice, configure a pod anti-affinity label that has the name of the tainted node as a value.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Use Istio's fault injection on the particular microservice whose faulty behavior you want to simulate.",
        "correct": true,
        "why": ""
      },
      "C": {
        "answer": "Destroy one of the nodes of the Kubernetes cluster to observe the behavior.",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Configure Istio's traffic management features to steer the traffic away from a crashing microservice.",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company is developing a new application that will allow globally distributed users to upload pictures and share them with other selected users. The application will support millions of concurrent users. You want to allow developers to focus on just building code without having to create and maintain the underlying infrastructure. Which service should you use to deploy the application?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "App Engine",
        "correct": true,
        "why": ""
      },
      "B": {
        "answer": "Cloud Endpoints",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Compute Engine",
        "correct": false,
        "why": ""
      },
      "D": {
        "answer": "Google Kubernetes Engine",
        "correct": false,
        "why": ""
      }
    }
  },
  {
    "question": "Your company provides a recommendation engine for retail customers. You are providing retail customers with an API where they can submit a user ID and theAPI returns a list of recommendations for that user. You are responsible for the API lifecycle and want to ensure stability for your customers in case the API makes backward-incompatible changes. You want to follow Google-recommended practices. What should you do?",
    "code": "",
    "multichoice": false,
    "alternatives": {
      "A": {
        "answer": "Create a distribution list of all customers to inform them of an upcoming backward-incompatible change at least one month before replacing the old API with the new API.",
        "correct": false,
        "why": ""
      },
      "B": {
        "answer": "Create an automated process to generate API documentation, and update the public API documentation as part of the CI/CD process when deploying an update to the API.",
        "correct": false,
        "why": ""
      },
      "C": {
        "answer": "Use a versioning strategy for the APIs that increases the version number on every backward-incompatible change.",
        "correct": true,
        "why": ""
      },
      "D": {
        "answer": "Use a versioning strategy for the APIs that adds the suffix DEPRECATED to the current API version number on every backward-incompatible change. Use the current version number for the new API.",
        "correct": false,
        "why": ""
      }
    }
  }
]